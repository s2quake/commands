<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Commands" xml:space="preserve">
    <value>Provides commands for the application.</value>
  </data>
  <data name="Commands.Initialize" xml:space="preserve">
    <value>Initializes the specified path for use as a repository.</value>
  </data>
  <data name="Commands.Add" xml:space="preserve">
    <value>Sets the file or directory to Added to the repository.</value>
  </data>
  <data name="Commands.Update" xml:space="preserve">
    <value>Update the files in the repository to the local path.</value>
  </data>
  <data name="Commands.Delete" xml:space="preserve">
    <value>Sets the file or directory to Deleted to the repository.</value>
  </data>
  <data name="Commands.Commit" xml:space="preserve">
    <value>Commits the files with the changed state to the repository.</value>
  </data>
  <data name="Commands.Message" xml:space="preserve">
    <value>Indicates the message that will be used to initialize the store.</value>
  </data>
  <data name="Commands.Initialize.path" xml:space="preserve">
    <value>Indicates the path to initialize the repository.</value>
  </data>
  <data name="Commands.Add.paths" xml:space="preserve">
    <value>Indicates the path to the file or directory in the repository to add.</value>
  </data>
  <data name="Commands.Update.path" xml:space="preserve">
    <value>Indicates the path to the data to be updated.</value>
  </data>
  <data name="Commands.Delete.paths" xml:space="preserve">
    <value>Indicates the path to the data for deletion.</value>
  </data>
  <data name="Commands.Commit.path" xml:space="preserve">
    <value>Indicates the path to commit to the repository.</value>
  </data>
  <data name="d:Commands" xml:space="preserve">
    <value>This project provides an example of parsing a string to call a specified method.
Methods defined within a class are provided in the form of commands, with parameters and properties as options.
Scattered methods and properties can be combined to define a single command.
It also includes information about how you should write help to show users how to use commands.
Examples of commands are based on some of the most commonly used commands in svn.</value>
  </data>
  <data name="d:Commands.Add" xml:space="preserve">
    <value>Sets the file or directory to Added to the repository.
If the path is a directory, all files within the directory are set to Added.
If the specified path does not exist, returns error code 1.</value>
  </data>
  <data name="d:Commands.Add.paths" xml:space="preserve">
    <value>Indicates the path to the file or directory in the repository to add.
You can set multiple file paths with space separators.
You can use absolute or relative paths.</value>
  </data>
  <data name="d:Commands.Commit" xml:space="preserve">
    <value>Commits the files with the changed state to the repository. If no path is specified, files that have changed within the current path are targeted.
Returns error code 1 if the specified path does not exist or is not the path used for the repository.</value>
  </data>
  <data name="d:Commands.Commit.path" xml:space="preserve">
    <value>&amp;Commands.Commit.path</value>
  </data>
  <data name="d:Commands.Delete" xml:space="preserve">
    <value>Sets the file or directory in the repository to Deleted.
If the path is a directory, all files within the directory are set to Deleted.
If the specified path does not exist, returns error code 1.</value>
  </data>
  <data name="d:Commands.Delete.paths" xml:space="preserve">
    <value>&amp;Commands.Delete.paths</value>
  </data>
  <data name="d:Commands.Initialize" xml:space="preserve">
    <value>Initializes the specified path for use as a repository. 
The path must be a directory and no files or subdirectories must exist within the directory.
Returns error code 1 if the specified path does not exist or does not meet the conditions.
If you want to restrict access, you can set an ID and password.</value>
  </data>
  <data name="d:Commands.Initialize.path" xml:space="preserve">
    <value>&amp;Commands.Initialize.path</value>
  </data>
  <data name="d:Commands.Message" xml:space="preserve">
    <value>&amp;Commands.Message</value>
  </data>
  <data name="d:Commands.Update" xml:space="preserve">
    <value>Update the files in the repository to the local path.
If no path is specified, the current path is used.
Returns error code 1 if the specified path is not a path in the repository or does not exist.</value>
  </data>
  <data name="d:Commands.Update.path" xml:space="preserve">
    <value>Indicates the path to the data to be updated.</value>
  </data>
</root>