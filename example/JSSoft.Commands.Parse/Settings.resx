<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Settings" xml:space="preserve">
    <value>Indicates the settings of the application.</value>
  </data>
  <data name="Settings.Path" xml:space="preserve">
    <value>Indicates the path where the application will run.</value>
  </data>
  <data name="Settings.ServiceName" xml:space="preserve">
    <value>Indicates the name of the service for which the application will run.</value>
  </data>
  <data name="Settings.WorkingPath" xml:space="preserve">
    <value>Indicates the working path of the application.</value>
  </data>
  <data name="Settings.Port" xml:space="preserve">
    <value>Indicates the port on which the application runs. If omitted, 10001 is used</value>
  </data>
  <data name="Settings.UseCache" xml:space="preserve">
    <value>Indicates whether the application uses cache.</value>
  </data>
  <data name="Settings.CacheSize" xml:space="preserve">
    <value>Indicates the capacity of the application cache. Default value is 1024.</value>
  </data>
  <data name="Settings.Libraries" xml:space="preserve">
    <value>Indicates the libraries that the application will use.</value>
  </data>
  <data name="d:Settings" xml:space="preserve">
    <value>This project provides a way to analyze a string and set a value to a specified class.
Assuming it is an application that creates and runs a service, the necessary properties for executing the task are defined.</value>
  </data>
  <data name="d:Settings.CacheSize" xml:space="preserve">
    <value>Specifies the size of the cache for the service to run its operations. The default value is 1024.
You must use a positive, non-zero number.
It is recommended that you set it to a power of 2 whenever possible to increase the efficiency of cache usage.</value>
  </data>
  <data name="d:Settings.Libraries" xml:space="preserve">
    <value>You can specify multiple paths with libraries to use. If any of the specified paths do not exist, the operation will fail.</value>
  </data>
  <data name="d:Settings.Path" xml:space="preserve">
    <value>Indicates the service's execution path. If the file in the executable path does not exist, the operation will fail.</value>
  </data>
  <data name="d:Settings.Port" xml:space="preserve">
    <value>Indicates the port for using the network.
If the value is omitted, a value of 10001 is used.</value>
  </data>
  <data name="d:Settings.ServiceName" xml:space="preserve">
    <value>Indicates the name under which the service is displayed.
It cannot be an empty string and must be at least three characters long.</value>
  </data>
  <data name="d:Settings.UseCache" xml:space="preserve">
    <value>To increase the efficiency of application operations, we use the cache feature. Cache information is stored in the cache path of the working path.</value>
  </data>
  <data name="d:Settings.WorkingPath" xml:space="preserve">
    <value>The working path is set to the execution path by default. If the specified path does not exist, the task fails.</value>
  </data>
</root>